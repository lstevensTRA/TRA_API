"""
Pattern Learning API Routes

This module provides endpoints for the ML-enhanced pattern learning system,
including user feedback, pattern statistics, and learning management.
"""

import logging
from fastapi import APIRouter, HTTPException, Query, Body
from typing import Optional, Dict, Any, List
from datetime import datetime

from app.utils.cookies import cookies_exist, get_cookies
from app.utils.pattern_learning import pattern_learning_system
from app.services.wi_service_enhanced import (
    get_pattern_learning_statistics, get_pattern_suggestions, 
    implement_pattern_suggestion, provide_extraction_feedback
)
from app.models.response_models import SuccessResponse
from app.models.pattern_learning_models import (
    PatternLearningResponse, FeedbackRequest, PatternLearningStats, PatternType
)

logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/stats", tags=["Pattern Learning"], 
           summary="Get Pattern Learning Statistics",
           description="Get comprehensive statistics about pattern learning performance",
           response_model=PatternLearningResponse)
def get_learning_statistics(
    pattern_type: Optional[str] = Query(None, description="Filter by pattern type (WI/AT/TI)")
):
    """
    Get comprehensive statistics about the pattern learning system.
    
    Args:
        pattern_type: Optional filter for specific pattern type
        
    Returns:
        Pattern learning statistics and performance metrics
    """
    logger.info(f"üîç Received pattern learning statistics request")
    if pattern_type:
        logger.info(f"üîç Pattern type filter: {pattern_type}")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Get statistics
        stats_data = get_pattern_learning_statistics(pattern_type)
        
        # Convert to response model
        stats = PatternLearningStats(
            pattern_type=PatternType(pattern_type) if pattern_type else None,
            total_patterns=stats_data.get('total_patterns', 0),
            active_patterns=stats_data.get('active_patterns', 0),
            total_extractions=stats_data.get('total_extractions', 0),
            successful_extractions=stats_data.get('successful_extractions', 0),
            overall_success_rate=stats_data.get('overall_success_rate', 0.0),
            average_confidence=stats_data.get('average_confidence', 0.0),
            patterns_with_feedback=stats_data.get('patterns_with_feedback', 0),
            suggestions_generated=stats_data.get('suggestions_generated', 0),
            suggestions_implemented=stats_data.get('suggestions_implemented', 0)
        )
        
        logger.info(f"‚úÖ Successfully retrieved pattern learning statistics")
        
        return PatternLearningResponse(
            success=True,
            message="Pattern learning statistics retrieved successfully",
            data=stats_data,
            stats=stats
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting pattern learning statistics: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/suggestions", tags=["Pattern Learning"],
           summary="Get Pattern Suggestions",
           description="Get pattern suggestions generated by the learning system",
           response_model=PatternLearningResponse)
def get_suggestions(
    pattern_id: Optional[str] = Query(None, description="Filter by specific pattern ID")
):
    """
    Get pattern suggestions generated by the learning system.
    
    Args:
        pattern_id: Optional filter for specific pattern
        
    Returns:
        List of pattern suggestions with confidence scores and reasoning
    """
    logger.info(f"üîç Received pattern suggestions request")
    if pattern_id:
        logger.info(f"üîç Pattern ID filter: {pattern_id}")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Get suggestions
        suggestions = get_pattern_suggestions(pattern_id)
        
        logger.info(f"‚úÖ Successfully retrieved {len(suggestions)} pattern suggestions")
        
        return PatternLearningResponse(
            success=True,
            message=f"Retrieved {len(suggestions)} pattern suggestions",
            data={
                'suggestions': suggestions,
                'total_suggestions': len(suggestions),
                'implemented_suggestions': sum(1 for s in suggestions if s.get('is_implemented', False))
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting pattern suggestions: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.post("/suggestions/{suggestion_id}/implement", tags=["Pattern Learning"],
            summary="Implement Pattern Suggestion",
            description="Implement a pattern suggestion to improve extraction accuracy",
            response_model=SuccessResponse)
def implement_suggestion(suggestion_id: str):
    """
    Implement a pattern suggestion to improve extraction accuracy.
    
    Args:
        suggestion_id: ID of the suggestion to implement
        
    Returns:
        Success response indicating implementation status
    """
    logger.info(f"üîç Received implement suggestion request for: {suggestion_id}")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Implement suggestion
        success = implement_pattern_suggestion(suggestion_id)
        
        if success:
            logger.info(f"‚úÖ Successfully implemented suggestion: {suggestion_id}")
            return SuccessResponse(
                message=f"Pattern suggestion {suggestion_id} implemented successfully",
                status="success",
                data={"suggestion_id": suggestion_id, "implemented": True}
            )
        else:
            logger.warning(f"‚ö†Ô∏è Failed to implement suggestion: {suggestion_id}")
            raise HTTPException(status_code=400, detail=f"Failed to implement suggestion {suggestion_id}")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error implementing suggestion {suggestion_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.post("/feedback", tags=["Pattern Learning"],
            summary="Provide Extraction Feedback",
            description="Provide user feedback on extraction results to improve pattern learning",
            response_model=SuccessResponse)
def provide_feedback(feedback_request: FeedbackRequest):
    """
    Provide user feedback on extraction results to improve pattern learning.
    
    Args:
        feedback_request: Feedback request containing extraction details
        
    Returns:
        Success response indicating feedback was recorded
    """
    logger.info(f"üîç Received feedback request for extraction: {feedback_request.extraction_id}")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Provide feedback
        success = provide_extraction_feedback(
            extraction_id=feedback_request.extraction_id,
            is_correct=feedback_request.is_correct,
            correct_value=feedback_request.correct_value,
            comments=feedback_request.comments
        )
        
        if success:
            logger.info(f"‚úÖ Successfully recorded feedback for extraction: {feedback_request.extraction_id}")
            return SuccessResponse(
                message="Feedback recorded successfully",
                status="success",
                data={
                    "extraction_id": feedback_request.extraction_id,
                    "feedback_recorded": True,
                    "timestamp": datetime.now().isoformat()
                }
            )
        else:
            logger.warning(f"‚ö†Ô∏è Failed to record feedback for extraction: {feedback_request.extraction_id}")
            raise HTTPException(status_code=400, detail=f"Failed to record feedback for extraction {feedback_request.extraction_id}")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error recording feedback: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/patterns", tags=["Pattern Learning"],
           summary="Get Pattern Performance",
           description="Get detailed performance metrics for all patterns",
           response_model=PatternLearningResponse)
def get_pattern_performance(
    pattern_type: Optional[str] = Query(None, description="Filter by pattern type (WI/AT/TI)"),
    form_name: Optional[str] = Query(None, description="Filter by form name"),
    min_success_rate: Optional[float] = Query(None, description="Minimum success rate filter")
):
    """
    Get detailed performance metrics for all patterns.
    
    Args:
        pattern_type: Optional filter for pattern type
        form_name: Optional filter for form name
        min_success_rate: Optional minimum success rate filter
        
    Returns:
        Detailed pattern performance data
    """
    logger.info(f"üîç Received pattern performance request")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Get pattern performance data
        patterns = pattern_learning_system.pattern_performance
        
        # Apply filters
        filtered_patterns = {}
        for pattern_id, pattern in patterns.items():
            # Pattern type filter
            if pattern_type and pattern.pattern_type.value != pattern_type.upper():
                continue
            
            # Form name filter
            if form_name and pattern.form_name != form_name:
                continue
            
            # Success rate filter
            if min_success_rate is not None and pattern.success_rate < min_success_rate:
                continue
            
            filtered_patterns[pattern_id] = pattern
        
        # Convert to list for response
        pattern_list = [pattern.dict() for pattern in filtered_patterns.values()]
        
        logger.info(f"‚úÖ Successfully retrieved {len(pattern_list)} pattern performance records")
        
        return PatternLearningResponse(
            success=True,
            message=f"Retrieved {len(pattern_list)} pattern performance records",
            data={
                'patterns': pattern_list,
                'total_patterns': len(pattern_list),
                'filters_applied': {
                    'pattern_type': pattern_type,
                    'form_name': form_name,
                    'min_success_rate': min_success_rate
                }
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting pattern performance: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/extractions", tags=["Pattern Learning"],
           summary="Get Extraction Results",
           description="Get detailed extraction results with confidence scores",
           response_model=PatternLearningResponse)
def get_extraction_results(
    case_id: Optional[str] = Query(None, description="Filter by case ID"),
    pattern_id: Optional[str] = Query(None, description="Filter by pattern ID"),
    confidence_level: Optional[str] = Query(None, description="Filter by confidence level (high/medium/low/unknown)")
):
    """
    Get detailed extraction results with confidence scores.
    
    Args:
        case_id: Optional filter for case ID
        pattern_id: Optional filter for pattern ID
        confidence_level: Optional filter for confidence level
        
    Returns:
        Detailed extraction results
    """
    logger.info(f"üîç Received extraction results request")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Get extraction results
        extractions = pattern_learning_system.extraction_results
        
        # Apply filters
        filtered_extractions = {}
        for extraction_id, extraction in extractions.items():
            # Case ID filter
            if case_id and extraction.case_id != case_id:
                continue
            
            # Pattern ID filter
            if pattern_id and extraction.pattern_id != pattern_id:
                continue
            
            # Confidence level filter
            if confidence_level and extraction.confidence_level.value != confidence_level:
                continue
            
            filtered_extractions[extraction_id] = extraction
        
        # Convert to list for response
        extraction_list = [extraction.dict() for extraction in filtered_extractions.values()]
        
        logger.info(f"‚úÖ Successfully retrieved {len(extraction_list)} extraction results")
        
        return PatternLearningResponse(
            success=True,
            message=f"Retrieved {len(extraction_list)} extraction results",
            data={
                'extractions': extraction_list,
                'total_extractions': len(extraction_list),
                'filters_applied': {
                    'case_id': case_id,
                    'pattern_id': pattern_id,
                    'confidence_level': confidence_level
                }
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting extraction results: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.post("/patterns/{pattern_id}/toggle", tags=["Pattern Learning"],
            summary="Toggle Pattern Active Status",
            description="Enable or disable a pattern in the learning system",
            response_model=SuccessResponse)
def toggle_pattern_status(pattern_id: str):
    """
    Toggle the active status of a pattern in the learning system.
    
    Args:
        pattern_id: ID of the pattern to toggle
        
    Returns:
        Success response indicating status change
    """
    logger.info(f"üîç Received toggle pattern status request for: {pattern_id}")
    
    # Check authentication
    if not cookies_exist():
        logger.error("‚ùå Authentication required - no cookies found")
        raise HTTPException(status_code=401, detail="Authentication required.")
    
    try:
        # Get pattern
        if pattern_id not in pattern_learning_system.pattern_performance:
            raise HTTPException(status_code=404, detail=f"Pattern {pattern_id} not found")
        
        pattern = pattern_learning_system.pattern_performance[pattern_id]
        
        # Toggle status
        pattern.is_active = not pattern.is_active
        pattern.last_updated = datetime.now()
        
        status = "active" if pattern.is_active else "inactive"
        logger.info(f"‚úÖ Successfully toggled pattern {pattern_id} to {status}")
        
        return SuccessResponse(
            message=f"Pattern {pattern_id} toggled to {status}",
            status="success",
            data={
                "pattern_id": pattern_id,
                "is_active": pattern.is_active,
                "timestamp": datetime.now().isoformat()
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error toggling pattern status: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/health", tags=["Pattern Learning"],
           summary="Pattern Learning System Health",
           description="Check the health and status of the pattern learning system",
           response_model=SuccessResponse)
def get_learning_system_health():
    """
    Check the health and status of the pattern learning system.
    
    Returns:
        Health status and system information
    """
    logger.info("üîç Received pattern learning system health check")
    
    try:
        # Get basic system info
        total_patterns = len(pattern_learning_system.pattern_performance)
        total_extractions = len(pattern_learning_system.extraction_results)
        total_feedback = len(pattern_learning_system.user_feedback)
        total_suggestions = len(pattern_learning_system.pattern_suggestions)
        
        # Check ML model status
        ml_models_available = (
            pattern_learning_system.confidence_model is not None and
            pattern_learning_system.vectorizer is not None
        )
        
        health_status = {
            "system_status": "healthy",
            "total_patterns": total_patterns,
            "total_extractions": total_extractions,
            "total_feedback": total_feedback,
            "total_suggestions": total_suggestions,
            "ml_models_available": ml_models_available,
            "timestamp": datetime.now().isoformat()
        }
        
        logger.info("‚úÖ Pattern learning system health check completed")
        
        return SuccessResponse(
            message="Pattern learning system is healthy",
            status="success",
            data=health_status
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error checking pattern learning system health: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}") 