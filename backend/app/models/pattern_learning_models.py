"""
Pydantic models for ML-enhanced pattern learning system
"""

from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
from enum import Enum

class PatternType(str, Enum):
    """Types of patterns supported by the learning system"""
    WI = "WI"  # Wage & Income patterns
    AT = "AT"  # Account Transcript patterns  
    TI = "TI"  # Tax Information patterns

class FieldType(str, Enum):
    """Types of fields that can be extracted"""
    INCOME = "income"
    WITHHOLDING = "withholding"
    IDENTIFIER = "identifier"
    DATE = "date"
    STATUS = "status"
    AMOUNT = "amount"
    TEXT = "text"

class ConfidenceLevel(str, Enum):
    """Confidence levels for pattern matches"""
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    UNKNOWN = "unknown"

class PatternPerformance(BaseModel):
    """Model for tracking individual pattern performance"""
    pattern_id: str = Field(..., description="Unique identifier for the pattern")
    pattern_type: PatternType = Field(..., description="Type of pattern (WI/AT/TI)")
    form_name: str = Field(..., description="Form name (e.g., W-2, 1099-MISC)")
    field_name: str = Field(..., description="Field name being extracted")
    field_type: FieldType = Field(..., description="Type of field being extracted")
    original_regex: str = Field(..., description="Original regex pattern")
    enhanced_regex: Optional[str] = Field(None, description="Enhanced regex pattern")
    success_count: int = Field(default=0, description="Number of successful extractions")
    failure_count: int = Field(default=0, description="Number of failed extractions")
    total_attempts: int = Field(default=0, description="Total extraction attempts")
    success_rate: float = Field(default=0.0, description="Success rate (0.0-1.0)")
    average_confidence: float = Field(default=0.0, description="Average confidence score")
    last_updated: datetime = Field(default_factory=datetime.now, description="Last update timestamp")
    is_active: bool = Field(default=True, description="Whether pattern is currently active")

class ExtractionResult(BaseModel):
    """Model for tracking individual extraction results"""
    extraction_id: str = Field(..., description="Unique identifier for the extraction")
    case_id: str = Field(..., description="Case ID being processed")
    pattern_id: str = Field(..., description="Pattern used for extraction")
    document_id: str = Field(..., description="Document ID being processed")
    field_name: str = Field(..., description="Field name being extracted")
    extracted_value: Optional[str] = Field(None, description="Extracted value")
    expected_value: Optional[str] = Field(None, description="Expected value (if known)")
    confidence_score: float = Field(..., description="Confidence score (0.0-1.0)")
    confidence_level: ConfidenceLevel = Field(..., description="Confidence level")
    success: bool = Field(..., description="Whether extraction was successful")
    user_feedback: Optional[str] = Field(None, description="User feedback (correct/incorrect)")
    feedback_timestamp: Optional[datetime] = Field(None, description="When feedback was provided")
    extraction_timestamp: datetime = Field(default_factory=datetime.now, description="When extraction occurred")
    context_text: Optional[str] = Field(None, description="Context text around extraction")

class PatternSuggestion(BaseModel):
    """Model for pattern suggestions generated by the learning system"""
    suggestion_id: str = Field(..., description="Unique identifier for the suggestion")
    pattern_id: str = Field(..., description="Original pattern ID")
    suggested_regex: str = Field(..., description="Suggested regex pattern")
    confidence_score: float = Field(..., description="Confidence in the suggestion")
    reasoning: str = Field(..., description="Reasoning for the suggestion")
    test_cases: List[str] = Field(default=[], description="Test cases that would be caught")
    created_at: datetime = Field(default_factory=datetime.now, description="When suggestion was created")
    is_implemented: bool = Field(default=False, description="Whether suggestion was implemented")

class UserFeedback(BaseModel):
    """Model for user feedback on extractions"""
    feedback_id: str = Field(..., description="Unique identifier for the feedback")
    extraction_id: str = Field(..., description="Extraction ID being rated")
    case_id: str = Field(..., description="Case ID")
    user_id: Optional[str] = Field(None, description="User ID providing feedback")
    is_correct: bool = Field(..., description="Whether extraction was correct")
    correct_value: Optional[str] = Field(None, description="Correct value if extraction was wrong")
    comments: Optional[str] = Field(None, description="Additional comments")
    feedback_timestamp: datetime = Field(default_factory=datetime.now, description="When feedback was provided")

class PatternLearningStats(BaseModel):
    """Model for pattern learning statistics"""
    pattern_type: PatternType = Field(..., description="Type of pattern")
    total_patterns: int = Field(..., description="Total number of patterns")
    active_patterns: int = Field(..., description="Number of active patterns")
    total_extractions: int = Field(..., description="Total extractions performed")
    successful_extractions: int = Field(..., description="Successful extractions")
    overall_success_rate: float = Field(..., description="Overall success rate")
    average_confidence: float = Field(..., description="Average confidence score")
    patterns_with_feedback: int = Field(..., description="Patterns with user feedback")
    suggestions_generated: int = Field(..., description="Pattern suggestions generated")
    suggestions_implemented: int = Field(..., description="Suggestions that were implemented")

class PatternLearningResponse(BaseModel):
    """Response model for pattern learning endpoints"""
    success: bool = Field(..., description="Whether operation was successful")
    message: str = Field(..., description="Response message")
    data: Optional[Dict[str, Any]] = Field(None, description="Response data")
    stats: Optional[PatternLearningStats] = Field(None, description="Learning statistics")

class FeedbackRequest(BaseModel):
    """Request model for user feedback"""
    extraction_id: str = Field(..., description="Extraction ID to provide feedback for")
    is_correct: bool = Field(..., description="Whether extraction was correct")
    correct_value: Optional[str] = Field(None, description="Correct value if extraction was wrong")
    comments: Optional[str] = Field(None, description="Additional comments")

class PatternEnhancementRequest(BaseModel):
    """Request model for pattern enhancement"""
    pattern_type: PatternType = Field(..., description="Type of pattern to enhance")
    form_name: Optional[str] = Field(None, description="Specific form to enhance")
    field_name: Optional[str] = Field(None, description="Specific field to enhance")
    include_suggestions: bool = Field(default=True, description="Include pattern suggestions")

class EnhancedExtractionResult(BaseModel):
    """Enhanced extraction result with learning metadata"""
    original_result: Dict[str, Any] = Field(..., description="Original extraction result")
    confidence_score: float = Field(..., description="Confidence score")
    confidence_level: ConfidenceLevel = Field(..., description="Confidence level")
    pattern_used: str = Field(..., description="Pattern used for extraction")
    extraction_id: str = Field(..., description="Extraction ID for feedback")
    learning_metadata: Dict[str, Any] = Field(default={}, description="Learning system metadata") 